
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BR CLIMB DIV DOT H1 H2 H3 H4 H5 H6 HASH ID IMG INT LI L_CURLY MULTIPLY P R_ANGLE R_CURLY SIBLING SPAN TABLE TD TR UL\n    base :  expression \n         |  empty\n    \n    expression : expression R_ANGLE expression\n               | expression SIBLING expression\n    \n    expression : DIV \n               | INT\n               | SPAN\n               | P\n               | H1\n               | H2\n               | H3\n               | H4\n               | H5\n               | H6\n               | UL\n               | LI\n               | TABLE\n               | TD\n               | TR\n               | IMG\n               | BR\n    \n    empty :\n    '
    
_lr_action_items = {'DIV':([0,21,22,],[4,4,4,]),'INT':([0,21,22,],[5,5,5,]),'SPAN':([0,21,22,],[6,6,6,]),'P':([0,21,22,],[7,7,7,]),'H1':([0,21,22,],[8,8,8,]),'H2':([0,21,22,],[9,9,9,]),'H3':([0,21,22,],[10,10,10,]),'H4':([0,21,22,],[11,11,11,]),'H5':([0,21,22,],[12,12,12,]),'H6':([0,21,22,],[13,13,13,]),'UL':([0,21,22,],[14,14,14,]),'LI':([0,21,22,],[15,15,15,]),'TABLE':([0,21,22,],[16,16,16,]),'TD':([0,21,22,],[17,17,17,]),'TR':([0,21,22,],[18,18,18,]),'IMG':([0,21,22,],[19,19,19,]),'BR':([0,21,22,],[20,20,20,]),'$end':([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24,],[-22,0,-1,-2,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-3,-4,]),'R_ANGLE':([2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24,],[21,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,21,21,]),'SIBLING':([2,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,23,24,],[22,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,22,22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'base':([0,],[1,]),'expression':([0,21,22,],[2,23,24,]),'empty':([0,],[3,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> base","S'",1,None,None,None),
  ('base -> expression','base',1,'p_base','plyparse.py',9),
  ('base -> empty','base',1,'p_base','plyparse.py',10),
  ('expression -> expression R_ANGLE expression','expression',3,'p_expression_nonterminal','plyparse.py',17),
  ('expression -> expression SIBLING expression','expression',3,'p_expression_nonterminal','plyparse.py',18),
  ('expression -> DIV','expression',1,'p_expression_terminal','plyparse.py',24),
  ('expression -> INT','expression',1,'p_expression_terminal','plyparse.py',25),
  ('expression -> SPAN','expression',1,'p_expression_terminal','plyparse.py',26),
  ('expression -> P','expression',1,'p_expression_terminal','plyparse.py',27),
  ('expression -> H1','expression',1,'p_expression_terminal','plyparse.py',28),
  ('expression -> H2','expression',1,'p_expression_terminal','plyparse.py',29),
  ('expression -> H3','expression',1,'p_expression_terminal','plyparse.py',30),
  ('expression -> H4','expression',1,'p_expression_terminal','plyparse.py',31),
  ('expression -> H5','expression',1,'p_expression_terminal','plyparse.py',32),
  ('expression -> H6','expression',1,'p_expression_terminal','plyparse.py',33),
  ('expression -> UL','expression',1,'p_expression_terminal','plyparse.py',34),
  ('expression -> LI','expression',1,'p_expression_terminal','plyparse.py',35),
  ('expression -> TABLE','expression',1,'p_expression_terminal','plyparse.py',36),
  ('expression -> TD','expression',1,'p_expression_terminal','plyparse.py',37),
  ('expression -> TR','expression',1,'p_expression_terminal','plyparse.py',38),
  ('expression -> IMG','expression',1,'p_expression_terminal','plyparse.py',39),
  ('expression -> BR','expression',1,'p_expression_terminal','plyparse.py',40),
  ('empty -> <empty>','empty',0,'p_empty','plyparse.py',46),
]
